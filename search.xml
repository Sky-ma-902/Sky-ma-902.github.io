<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算机视觉四大坐标系</title>
      <link href="/2025/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%9B%9B%E5%A4%A7%E5%9D%90%E6%A0%87%E7%B3%BB/"/>
      <url>/2025/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E5%9B%9B%E5%A4%A7%E5%9D%90%E6%A0%87%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机四大坐标系"><a href="#计算机四大坐标系" class="headerlink" title="计算机四大坐标系"></a>计算机四大坐标系</h1><!-- 四大坐标系及其转换 --><ul><li>&#x3D;&#x3D;像素坐标系&#x3D;&#x3D;</li></ul><p>坐标原点在左上角，关键在于y轴正方向向下</p><ul><li>&#x3D;&#x3D;相机坐标系&#x3D;&#x3D;</li></ul><p>坐标原点为相机光心，光轴为Z轴的右手坐标系，(Xc,Yc,Zc)，也是投影中心</p><p>我的理解是它为连接图像物理坐标系与世界坐标系的桥梁</p><ul><li>&#x3D;&#x3D;图像坐标系&#x3D;&#x3D;</li></ul><p>坐标原点为像素坐标系的中心，同时也为相机坐标系的Z轴与图像的交点</p><p>dx和dy分别表示每个像素在横轴x和纵轴y的物理尺寸</p><ul><li>&#x3D;&#x3D;世界坐标系&#x3D;&#x3D;</li></ul><p>用于描述物体在真实世界中的绝对位置，(Xw,Yw,Zw)</p><h2 id="1-世界坐标系与相机坐标系"><a href="#1-世界坐标系与相机坐标系" class="headerlink" title="1.世界坐标系与相机坐标系"></a>1.世界坐标系与相机坐标系</h2><p>属于刚体变换：物体不会发生形变，只发生旋转和平移（旋转矩阵R和平移向量T）</p><p>旋转一共有三个自由度，即绕x,y,z轴旋转，根据旋转角度可以分别得到三个方向上的旋转矩阵Rx,Ry,Rz</p><p>旋转矩阵即为三者的乘积</p><img src="/.com//1.png" style="zoom:50%;"><h2 id="2-相机坐标系与图像坐标系"><a href="#2-相机坐标系与图像坐标系" class="headerlink" title="2. 相机坐标系与图像坐标系"></a>2. 相机坐标系与图像坐标系</h2><p>透视投影关系，从3D转换成2D，利用相似三角形进行计算</p><img src="/.com//2.png" style="zoom:50%;"><h2 id="3-图像坐标系与像素坐标系"><a href="#3-图像坐标系与像素坐标系" class="headerlink" title="3.图像坐标系与像素坐标系"></a>3.图像坐标系与像素坐标系</h2><img src="/.com//3.png" style="zoom:50%;"><h2 id="4-相机标定"><a href="#4-相机标定" class="headerlink" title="4.相机标定"></a><strong>4.相机标定</strong></h2><p>求解相机内参矩阵与外参矩阵</p><img src="/.com//4.png" style="zoom:50%;"><img src="/.com//5.png" style="zoom:75%;">]]></content>
      
      
      <categories>
          
          <category> 计算机视觉 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机视觉 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cmake的基础内容</title>
      <link href="/2025/03/16/Cmake/"/>
      <url>/2025/03/16/Cmake/</url>
      
        <content type="html"><![CDATA[<h1 id="跨平台编译工具-CMake的语法特性与常用变量"><a href="#跨平台编译工具-CMake的语法特性与常用变量" class="headerlink" title="跨平台编译工具-CMake的语法特性与常用变量"></a>跨平台编译工具-CMake的语法特性与常用变量</h1><!-- Cmake的语法特性与常用变量 --><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><ul><li><p>Cmake (Cross Platform Make) 是一个跨平台的编译工具，可以用简单的语句来描述跨平台的编译过程</p></li><li><p>CMake已经成为了大部分C++开源项目的首要编译工具</p></li></ul><blockquote><p>在不同的操作系统上，我们可以使用不同的编译工具，比如 windows 中使用 Visual Studio 的开发套件， mac 中使用 xcode 开发套件，Linux 中使用 Makefile 结合 g++ 编译，那如果我们使用 cmake 就可以解决了跨平台的问题。</p></blockquote><h2 id="2-cmake-基础知识"><a href="#2-cmake-基础知识" class="headerlink" title="2. cmake 基础知识"></a>2. cmake 基础知识</h2><h3 id="2-1-cmake-的基本语法特性"><a href="#2-1-cmake-的基本语法特性" class="headerlink" title="2.1. cmake 的基本语法特性"></a>2.1. cmake 的基本语法特性</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">指令名称(参数1 参数2)</span><br></pre></td></tr></table></figure><p>参数使用小括号包裹起来，参数之间使用空格或者分号隔开。cmake的指令不区分大小写，但是参数严格区分大小写，如下示例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>(HELLO hello.cpp)</span><br><span class="line"><span class="built_in">add_executable</span>(hello main.cpp hello.cpp)</span><br><span class="line"><span class="built_in">ADD_EXECUTABLE</span>(hello main.cpp $&#123;HELLO&#125;)</span><br></pre></td></tr></table></figure><p>cmake指令的变量使用 <code>$&#123;变量&#125;</code> 的形式读取变量，但在 IF 逻辑判断中，直接输入变量名称即可，如上面示例代码中的 <code>HELLO</code></p><h3 id="2-2-cmake的重要指令和常用变量"><a href="#2-2-cmake的重要指令和常用变量" class="headerlink" title="2.2. cmake的重要指令和常用变量"></a>2.2. cmake的重要指令和常用变量</h3><ul><li><code>cmake_minimum_required</code> : 指定cmake最小版本要求</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定cmake最小版本要求为 2.8.3</span></span><br><span class="line">cmake_minimum_required(VERSION 2.8.3)</span><br></pre></td></tr></table></figure><ul><li><code>project</code> : 定义工程名称，并可以指定工程可支持的语言，语法格式为 <code>project(项目域名 语言)</code>，如下示例</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定工程的名称为HELLO</span></span><br><span class="line">project(HELLO)</span><br></pre></td></tr></table></figure><ul><li><code>set</code> : 显示定义变量</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义SRC 变量值为： hello.cpp main.cpp</span></span><br><span class="line">set(SRC hello.cpp main.cpp)</span><br></pre></td></tr></table></figure><ul><li><code>include_directories</code> : 向工程中添加多个头文件搜索路径，相当于指定 <code>g++</code> 的 <code>-I</code> 参数</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 /usr/include 和 ./include 路径添加到头文件搜索路径中</span></span><br><span class="line">include_directories(/usr/include ./include)</span><br></pre></td></tr></table></figure><ul><li><code>link_directories</code> : 向工程中添加多个库文件搜索路径，相当于 <code>g++</code> 的 <code>-L</code> 参数</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 /usr/lib 和 ./lib 路径添加到库文件搜索路径中</span></span><br><span class="line">link_directories(/usr/lib ./lib)</span><br></pre></td></tr></table></figure><ul><li><code>add_library</code> : 生成库文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过变量SRC生成hello.so 共享库，第二个参数填 SHARED 或 STATIC 或 MOUDLE</span></span><br><span class="line">add_library(hello SHARED $&#123;SRC&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>add_compile_options</code> : 添加编译参数</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加编译参数 -Wall -std=c++11 以及 -o2</span></span><br><span class="line">add_compile_options(-Wall -std=c++11 -o2)</span><br></pre></td></tr></table></figure><ul><li><code>add_excutable</code> : 生成可执行文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译 main.cpp 生成可执行文件 main</span></span><br><span class="line">add_excutable(main main.cpp)</span><br></pre></td></tr></table></figure><ul><li><code>target_link_libraries</code> : 为目标可执行文件添加需要的共享库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将hello动态库文件链接到可执行文件main</span></span><br><span class="line">target_link_libraries(main hello)</span><br></pre></td></tr></table></figure><ul><li><code>add_subdirectory</code> : 向当前工程添加存放源文件的子目录，并可以指定中间二进制和目标二进制存放的位置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加src子目录，src中需要有一个 CMakeLists.txt</span></span><br><span class="line">add_subdirectory(src)</span><br></pre></td></tr></table></figure><ul><li><code>aux_source_directory</code> : 发现一个目录下所有的源代码文件并将列表存储在一个变量中，这个指令临时被用来自动构建源文件列表。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义 SRC 变量，其值为当前目录下所有的源代码文件</span></span><br><span class="line">aux_source_directory(. SRC)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译SRC 变量下的源代码文件，生成 mian 可执行文件</span></span><br><span class="line">add_excutable(main $&#123;SRC)</span><br></pre></td></tr></table></figure><h3 id="2-3-Cmake-常用变量"><a href="#2-3-Cmake-常用变量" class="headerlink" title="2.3. Cmake 常用变量"></a>2.3. Cmake 常用变量</h3><ul><li><code>CMAKE_FLAGS</code> : gcc 编译选项</li><li><code>CMAKE_CXX_FLAGS</code> : g++ 编译选项</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在 CMAKE_CXX_FLAGS 编译选项后追加 -std=c++11</span></span><br><span class="line">set(CMAKE_CXX_FLAGS &quot;&#123;CMAKE_CXX_FLAGS&#125; -std=c++11&quot;)</span><br></pre></td></tr></table></figure><ul><li><code>CMAKE_BUILD_TYPE</code> : 编译类型(Debug，Release)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设定编译类型为 debug ，调试时需要选择 debug</span> </span><br><span class="line">set(CMAKE_BUILD_TYPE Debug)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设定编译类型为release，发布时需要选择 release</span></span><br><span class="line">set(CMAKE_BUILD_TYPE Release)</span><br></pre></td></tr></table></figure><ul><li><code>CMAKE_BINARY_DIR</code>、<code>PROJECT_BINARY_DIR</code>、<code>&lt;projectname&gt;_BINARY_DIR</code></li></ul><ol><li>这三个变量指代的内容是一致的</li><li>如果是 in binary build ，指的就是工程顶级目录</li><li>如果是 out-of-binary 编译，指的是工程编译发生的目录</li><li>PROJECT_BINARY_DIR 跟其他指令稍有区别，但这里可以理解他们是一致的</li></ol><ul><li><code>CMAKE_SOURCE_DIR</code>、<code>PROJECT_SOURCE_DIR</code>、<code>&lt;projectname&gt;_SOURCE_DIR</code></li></ul><ol><li>这三个变量指代的内容是一致的，不论采用何种编译方式，都是工程经层目录</li><li>如果是 in source build ，跟 CMAKE_BINARY_DIR 变量一致</li><li>PROJECT_SOURCE_DIR 跟其他指令稍有区别，但这里可以理解他们是一致的</li></ol><ul><li><p><code>CMAKE_C_COMPILE</code> : 指定C编译器</p></li><li><p><code>CMAKE_CXX_COMPILE</code> : 指定C++编译器</p></li><li><p><code>EXECUTABLE_OUT_PATH</code> : 可执行文件输出的存放路径</p></li><li><p><code>LIBRARY_OUTOUT_PATH</code> : 库文件输出的存放路径</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Cmake </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cmake </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
